#!/usr/bin/env ruby
# coding: utf-8

require 'thor'
require 'awesome_print'
require_relative '../lib/utilities'
require_relative '../lib/help'
require_relative '../config/help'
require_relative '../lib/logging'
require_relative '../lib/mines'

# require all generators in lib
mines_root = File.expand_path(File.dirname(__FILE__)+'/..')
Dir[mines_root+'/lib/generators/*.rb'].each {|file| require file }

module Mines
  
  # The mines executable. It subclasses Thor and
  # invocates generators according to parameters
  class Cli < Thor
    
    include Logging
    
    def initialize *args
      super
    end
    
    
    desc Help.new[:sum], Help.new[:desc]
    # Define the 'new' action. Invocate the new generator
    # @param name The name of the new application
    def new(name)
      ARGV.shift
      log.debug "command 'new' with arguments: #{ARGV.join(', ')}"
      Generator::Application.start ARGV
    end
    
    # help
    def help *args
       if args.empty?
         log.debug "command 'help' with no arguments"
       else
         log.debug "command 'help' with arguments: #{args.join(', ').to_s}"
       end
       puts "Summary:"
       super
       puts "Now print my help :)\nYeah!"
    end
    
    # generate
    desc Help.generate[:sum], Help.generate[:desc]
    #method_option :evented, :type => :boolean, :default => false
    # generate a miner
    def generate(type,name)
      Mines.mines_app_check #TODO Test
      types = %w{twitter network process metrics}
      unless types.include? type
        puts "The type of the miner could be either twitter or network or process or metrics"
        puts "you typed: #{type}"
        exit 0
      end
      puts "Generate a #{type} miner with name: #{name}"
      
      Generator::Miner.start [type, name]
    end
  end
end

# Check if 'mines' is invoked in the root directory of a Mines App
#Mines.mines_app_check #TODO This code can not be here

# Start client
Mines::Cli.start ARGV
